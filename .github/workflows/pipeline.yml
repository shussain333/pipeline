name: Create Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type (major, minor, patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Configure Git user
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

      - name: Get current version
        id: get_version
        run: echo ::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

      - name: Create Maven settings.xml
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>sonatype-nexus-releases</id>
                      <username>${{ secrets.SONATYPE_USERNAME }}</username>
                      <password>${{ secrets.SONATYPE_PASSWORD }}</password>
                    </server>
                    <server>
                      <id>sonatype-nexus-snapshots</id>
                      <username>${{ secrets.SONATYPE_USERNAME }}</username>
                      <password>${{ secrets.SONATYPE_PASSWORD }}</password>
                    </server>
                    <server>
                      <id>central</id>
                      <username>${{ secrets.SONATYPE_USERNAME }}</username>
                      <password>${{ secrets.SONATYPE_PASSWORD }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml
      - name: View settings.xml
        run: cat ~/.m2/settings.xml
      - name: Install pinentry
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg
#      - name: Create gpg-agent.conf
#        run: |
#          mkdir -p ~/.gnupg
#          touch ~/.gnupg/gpg-agent.conf
#          chmod 700 ~/.gnupg
#          chmod 600 ~/.gnupg/*
#
#      - name: Configure pinentry-program (Optional)
#        run: |
#          echo "pinentry-program /usr/bin/pinentry-tty" >> ~/.gnupg/gpg-agent.conf
#
#      - name: Configure pinentry-program
#        run: |
#          echo "pinentry-program /usr/bin/pinentry-tty" >> ~/.gnupg/gpg-agent.conf
#      - name: Stop GPG agent (if running)
#        run: |
#          if [[ -n "$(pgrep gpg-agent)" ]]; then
#            gpg-agent --kill
#          fi
      - name: Find pinentry-tty path
        id: find-pinentry
        run: echo "PINENTRY_PATH=$(which pinentry-curses)" >> $GITHUB_ENV
      - name: Create GPG Configuration
        run: |
          mkdir -p /home/runner/.gnupg
          echo "allow-preset-passphrase" >> /home/runner/.gnupg/gpg-agent.conf
          echo "use-agent" >> /home/runner/.gnupg/gpg.conf
          echo "pinentry-program ${{ env.PINENTRY_PATH }}" >> /home/runner/.gnupg/gpg-agent.conf
          chmod 700 /home/runner/.gnupg
          chmod 600 /home/runner/.gnupg/*
          gpgconf --kill gpg-agent  # Restart the GPG agent
          export GPG_TTY=$(tty)
      - name: content of GPG config
        run: cat /home/runner/.gnupg/gpg-agent.conf
      - name: Import GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
      - name: List GPG keys
        run: gpg --list-secret-keys
      - name: Content of conf
        run: |
          ls -a -1d /home/runner/.gnupg/
      - name: Set GPG Passphrase
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY: ${{ secrets.GPG_USER }}
        run: |
          echo "MAVEN_GPG_PASSPHRASE=${GPG_PASSPHRASE}" >> $GITHUB_ENV

      - name: Calculate release version
        id: calc_version
        run: |
          current_version=${{ steps.get_version.outputs.version }}
          IFS='.' read -ra version_parts <<< "$current_version"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          case "${{ github.event.inputs.releaseType }}" in
            major)
              new_version=$((major + 1)).0.0
              next_dev_version=$((major + 1)).0.1
              ;;
            minor)
              new_version=$major.$((minor + 1)).0
              next_dev_version=$major.$((minor + 1)).1
              ;;
            patch)
              new_version=$major.$minor.$((patch + 1))
              next_dev_version=$major.$minor.$((patch + 2))
              ;;
          esac

          echo ::set-output name=release_version::$new_version
          echo ::set-output name=next_dev_version::$next_dev_version

      - name: Prepare Release
        run: |
          mvn -B release:prepare \
          -DreleaseVersion=${{ steps.calc_version.outputs.release_version }} \
          -DdevelopmentVersion=${{ steps.calc_version.outputs.next_dev_version }}-SNAPSHOT \
          -DtagNameFormat=v@{project.version} \
          -DpushChanges=false \
          -Dsigning.keyId="${{ secrets.GPG_USER }}" \
          -Dsigning.passphrase="${GPG_PASSPHRASE}" \
          -X

      - name: Push changes
        run: |
          git push
          git push --tags

      - name: Release snapshot
        run: mvn -B release:perform -DlocalCheckout=true -P snapshot -Dsigning.keyId="${{ secrets.GPG_USER }}" -Dsigning.passphrase="${{ secrets.GPG_USER }}" -s ~/.m2/settings.xml

# commenting below working code
#      - name: Perform Release
#        run: mvn release:perform -DlocalCheckout=true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
#
#      - name: Create GitHub Release
#        uses: actions/create-release@v1.1.4
#        with:
#          tag_name: ${{ steps.calc_version.outputs.release_version }}
#          release_name: Release ${{ steps.calc_version.outputs.release_version }}
#          draft: false
#          prerelease: false
#        env:
#          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
